{"version":3,"sources":["Components/Pokecard.js","Components/Pokelist.js","Components/PokeDetail.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","id","name","className","to","src","alt","width","height","Pokelist","useState","pokemons","setPokemons","useEffect","fetchPokemons","fetch","then","response","json","pokes","results","map","pokemon","i","key","PokeDetail","match","pokemonDetail","setPokemonDetail","fetchName","params","detail","weight","types","type","abilities","ability","App","basename","process","path","exact","component","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAsBeA,MAlBf,YAAiC,IAAbC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,KACtB,OACE,yBAAKC,UAAU,0BACb,kBAAC,IAAD,CAAMC,GAAE,UAAKH,IACX,yBACEE,UAAU,YACVE,IAAG,mFAA8EJ,EAA9E,QACHK,IAAI,GACJC,MAAM,QACNC,OAAO,UAET,6BACA,yBAAKL,UAAU,wBAAwBD,MCoBhCO,MAhCf,WAAqB,IAAD,EACcC,mBAAS,IADvB,mBACXC,EADW,KACDC,EADC,KAGlBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAgB,WACpBC,MAAM,+CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAIP,EAAYO,EAAMC,aAGrC,OACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,WACb,yBACEE,IAAI,uDACJC,IAAI,GACJC,MAAM,OACNC,OAAO,SAET,wCAEDG,EAASU,KAAI,SAACC,EAASC,GAAV,OACZ,kBAAC,EAAD,CAAUtB,GAAIsB,EAAI,EAAGC,IAAKD,EAAGrB,KAAMoB,EAAQpB,Y,OC+BpCuB,MA1Df,YAAgC,IAAVC,EAAS,EAATA,MAAS,EACahB,mBAAS,IADtB,mBACtBiB,EADsB,KACPC,EADO,KAG7Bf,qBAAU,WACRgB,MAEC,IAEH,IAAMA,EAAY,WAChBd,MAAM,qCAAD,OAAsCW,EAAMI,OAAOR,UACrDN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAe,GAAM,OAAIH,EAAiBG,OAGrC,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,WACb,yBACEE,IAAI,uDACJC,IAAI,GACJC,MAAM,OACNC,OAAO,SAET,wCAEF,6BACE,yBACEL,UAAU,6BACVE,IAAG,mFAA8EqB,EAAMI,OAAOR,QAA3F,QACHhB,IAAI,GACJC,MAAM,QACNC,OAAO,WAGX,yBAAKL,UAAU,eAAf,OACOwB,EAAc1B,GACnB,6BACA,6BAHF,SAIS0B,EAAczB,KACrB,6BACA,6BANF,WAOWyB,EAAcnB,OACvB,6BACA,6BATF,WAUWmB,EAAcK,OACvB,6BACA,6BAZF,SAaSL,EAAcM,OAASN,EAAcM,MAAM,GAAGC,KAAKhC,KAC1D,6BACA,6BAfF,aAgBa,IACVyB,EAAcQ,WAAaR,EAAcQ,UAAU,GAAGC,QAAQlC,QCpCxDmC,E,iLAXX,OACE,kBAAC,IAAD,CAAQC,SAAUC,YAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,YAAYE,UAAWjB,U,GAN3BkB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCbNsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.7dd89df3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../App.css\";\r\n\r\nfunction Pokecard({ id, name }) {\r\n  return (\r\n    <div className=\" pokemons ma1 tc dib  \">\r\n      <Link to={`${id}`}>\r\n        <img\r\n          className=\"pokeimage\"\r\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\r\n          alt=\"\"\r\n          width=\"160px\"\r\n          height=\"160px\"\r\n        />\r\n        <br />\r\n        <div className=\"pokenames tc dib pa1\">{name}</div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Pokecard from \"./Pokecard\";\r\nimport \"../App.css\";\r\n\r\nfunction Pokelist() {\r\n  const [pokemons, setPokemons] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchPokemons();\r\n  }, []);\r\n\r\n  const fetchPokemons = () => {\r\n    fetch(\"https://pokeapi.co/api/v2/pokemon?limit=807\")\r\n      .then(response => response.json())\r\n      //.then(pokes => console.log(pokes));\r\n      .then(pokes => setPokemons(pokes.results));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"pokedex\">\r\n        <img\r\n          src=\"http://pngimg.com/uploads/pokeball/pokeball_PNG8.png\"\r\n          alt=\"\"\r\n          width=\"60px\"\r\n          height=\"60px\"\r\n        />\r\n        <h2>POKEDEX</h2>\r\n      </div>\r\n      {pokemons.map((pokemon, i) => (\r\n        <Pokecard id={i + 1} key={i} name={pokemon.name} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pokelist;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction PokeDetail({ match }) {\r\n  const [pokemonDetail, setPokemonDetail] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchName();\r\n    // console.log(match);\r\n  }, []);\r\n\r\n  const fetchName = () => {\r\n    fetch(`https://pokeapi.co/api/v2/pokemon/${match.params.pokemon}`)\r\n      .then(response => response.json())\r\n      // .then(detail => console.log(detail));\r\n      .then(detail => setPokemonDetail(detail));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"pokedex\">\r\n        <img\r\n          src=\"http://pngimg.com/uploads/pokeball/pokeball_PNG8.png\"\r\n          alt=\"\"\r\n          width=\"60px\"\r\n          height=\"60px\"\r\n        />\r\n        <h2>POKEDEX</h2>\r\n      </div>\r\n      <div>\r\n        <img\r\n          className=\" detailimg tc dib pa1 ma2 \"\r\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${match.params.pokemon}.png`}\r\n          alt=\"\"\r\n          width=\"200px\"\r\n          height=\"200px\"\r\n        ></img>\r\n      </div>\r\n      <div className=\"details dib\">\r\n        ID: {pokemonDetail.id}\r\n        <br />\r\n        <br />\r\n        name: {pokemonDetail.name}\r\n        <br />\r\n        <br />\r\n        height: {pokemonDetail.height}\r\n        <br />\r\n        <br />\r\n        weight: {pokemonDetail.weight}\r\n        <br />\r\n        <br />\r\n        type: {pokemonDetail.types && pokemonDetail.types[0].type.name}\r\n        <br />\r\n        <br />\r\n        abilities:{\" \"}\r\n        {pokemonDetail.abilities && pokemonDetail.abilities[0].ability.name}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokeDetail;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Pokelist from \"./Components/Pokelist\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport PokeDetail from \"./Components/PokeDetail\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Pokelist} />\r\n          <Route path=\"/:pokemon\" component={PokeDetail} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}